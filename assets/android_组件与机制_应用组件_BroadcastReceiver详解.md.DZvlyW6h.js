import{_ as a,c as i,o as l,ai as o}from"./chunks/framework.mRETCtIp.js";const _=JSON.parse('{"title":"BroadcastReceiver 详解","description":"","frontmatter":{},"headers":[],"relativePath":"android/组件与机制/应用组件/BroadcastReceiver详解.md","filePath":"android/组件与机制/应用组件/BroadcastReceiver详解.md","lastUpdated":1759056152000}'),r={name:"android/组件与机制/应用组件/BroadcastReceiver详解.md"};function t(d,e,c,n,s,u){return l(),i("div",null,[...e[0]||(e[0]=[o('<h1 id="broadcastreceiver-详解" tabindex="-1">BroadcastReceiver 详解 <a class="header-anchor" href="#broadcastreceiver-详解" aria-label="Permalink to &quot;BroadcastReceiver 详解&quot;">​</a></h1><p>BroadcastReceiver 是 Android 中的事件分发枢纽，用于响应系统广播或应用内部消息。通过合理注册与解耦设计，可以在保持灵活性的同时降低安全风险。</p><h2 id="角色定位与应用场景" tabindex="-1">角色定位与应用场景 <a class="header-anchor" href="#角色定位与应用场景" aria-label="Permalink to &quot;角色定位与应用场景&quot;">​</a></h2><ul><li>监听系统级事件：网络变化、电量、开机完成、权限变更等。</li><li>应用内解耦通信：模块间转发状态、触发异步刷新。</li><li>配合 AlarmManager、WorkManager 处理定时任务或约束触发。</li></ul><h2 id="注册方式对比" tabindex="-1">注册方式对比 <a class="header-anchor" href="#注册方式对比" aria-label="Permalink to &quot;注册方式对比&quot;">​</a></h2><ul><li>静态注册 <ul><li>在 <code>AndroidManifest.xml</code> 中声明。</li><li>适用于系统广播或开机即需响应的场景。</li><li>Android 8.0 起对隐式广播静态注册进行限制，需关注白名单。</li></ul></li><li>动态注册 <ul><li>在运行时通过 <code>registerReceiver()</code> 注册，<code>unregisterReceiver()</code> 释放。</li><li>常在 Activity/Service 的 <code>onResume()</code> / <code>onPause()</code> 中配对调用。</li><li>适合生命周期敏感或仅在前台需要的监听。</li></ul></li></ul><h2 id="广播类型" tabindex="-1">广播类型 <a class="header-anchor" href="#广播类型" aria-label="Permalink to &quot;广播类型&quot;">​</a></h2><ul><li>普通广播：异步分发，接收器并行执行。</li><li>有序广播：按优先级串行执行，可通过 <code>abortBroadcast()</code> 中断。</li><li>粘性广播（已弃用）：保留最后一次值，建议改用 LiveData/Flow 等替代方案。</li></ul><h2 id="intentfilter-设计" tabindex="-1">IntentFilter 设计 <a class="header-anchor" href="#intentfilter-设计" aria-label="Permalink to &quot;IntentFilter 设计&quot;">​</a></h2><ul><li><code>action</code>：命名需遵循包名前缀，避免冲突（如 <code>com.example.ACTION_SYNC_COMPLETE</code>）。</li><li><code>category</code>：用于补充过滤条件，默认为 <code>CATEGORY_DEFAULT</code>。</li><li><code>data</code>：结合 URI/MIME 过滤，常配合系统广播使用。</li></ul><h2 id="安全与权限控制" tabindex="-1">安全与权限控制 <a class="header-anchor" href="#安全与权限控制" aria-label="Permalink to &quot;安全与权限控制&quot;">​</a></h2><ul><li>对外暴露的广播使用显式 intent 或在 Manifest 中声明 <code>permission</code>。</li><li>对敏感广播设置 <code>android:exported=&quot;false&quot;</code> 或自定义权限。</li><li>避免使用 <code>Intent.ACTION_NEW_OUTGOING_CALL</code> 等受限制广播，必要时寻找替代 API。</li></ul><h2 id="性能与稳定性" tabindex="-1">性能与稳定性 <a class="header-anchor" href="#性能与稳定性" aria-label="Permalink to &quot;性能与稳定性&quot;">​</a></h2><ul><li>广播接收器逻辑需迅速返回，耗时工作交给 Service、WorkManager。</li><li>避免在主线程执行重计算，推荐提交到线程池或协程。</li><li>使用 <code>goAsync()</code> + <code>BroadcastReceiver.PendingResult</code> 支持短期异步任务（最多 10 秒）。</li></ul><h2 id="调试与监控" tabindex="-1">调试与监控 <a class="header-anchor" href="#调试与监控" aria-label="Permalink to &quot;调试与监控&quot;">​</a></h2><ul><li><code>adb shell dumpsys activity broadcasts</code> 查看当前在队列中的广播。</li><li>添加结构化日志标记 action、来源与执行耗时。</li><li>对安全事件广播增加审计，例如记录关键权限授予来源。</li></ul><h2 id="常见问题排查" tabindex="-1">常见问题排查 <a class="header-anchor" href="#常见问题排查" aria-label="Permalink to &quot;常见问题排查&quot;">​</a></h2><ul><li>广播未触达：检查是否显式广播、<code>exported</code> 配置、注册时机以及系统限制。</li><li>多次重复执行：确认是否注册多次未注销，或是否接收了不必要 action。</li><li>安全漏洞：避免接收器处理未校验来源的数据，必要时校验签名或 UID。</li></ul><p>通过精确的 IntentFilter 设计、谨慎的生命周期管理，以及对耗时任务的异步下沉，BroadcastReceiver 能够高效支撑事件驱动架构，同时保证系统资源与安全边界。</p>',19)])])}const m=a(r,[["render",t]]);export{_ as __pageData,m as default};
