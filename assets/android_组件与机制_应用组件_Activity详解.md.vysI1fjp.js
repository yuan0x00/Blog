import{_ as a,c as i,o as l,aj as t}from"./chunks/framework.BiF827kf.js";const u=JSON.parse('{"title":"Activity 详解","description":"","frontmatter":{},"headers":[],"relativePath":"android/组件与机制/应用组件/Activity详解.md","filePath":"android/组件与机制/应用组件/Activity详解.md","lastUpdated":1759056152000}'),o={name:"android/组件与机制/应用组件/Activity详解.md"};function r(c,e,d,n,s,h){return l(),i("div",null,[...e[0]||(e[0]=[t('<h1 id="activity-详解" tabindex="-1">Activity 详解 <a class="header-anchor" href="#activity-详解" aria-label="Permalink to “Activity 详解”">​</a></h1><p>Activity 是 Android 应用中负责界面呈现与用户交互的核心组件，既承担 UI 渲染，也协调生命周期内的数据订阅、权限处理与导航逻辑。合理设计 Activity，可显著提升应用的响应性与稳定性。</p><h2 id="核心职责与角色定位" tabindex="-1">核心职责与角色定位 <a class="header-anchor" href="#核心职责与角色定位" aria-label="Permalink to “核心职责与角色定位”">​</a></h2><ul><li>承载单个界面或交互流程，管理布局与事件分发。</li><li>作为业务入口，驱动 ViewModel、Presenter 等中间层协作。</li><li>协同 Fragment、Navigation Component 组成复杂导航结构。</li></ul><h2 id="生命周期全析" tabindex="-1">生命周期全析 <a class="header-anchor" href="#生命周期全析" aria-label="Permalink to “生命周期全析”">​</a></h2><ul><li><code>onCreate()</code>：完成布局初始化、依赖注入、SavedStateHandle 恢复。</li><li><code>onStart()</code>：界面可见，适合启动动画或请求轻量数据。</li><li><code>onResume()</code>：界面可交互，订阅 LiveData/StateFlow，恢复传感器监听。</li><li><code>onPause()</code>：暂停用户交互，提交草稿、持久化轻量状态。</li><li><code>onStop()</code>：界面不可见，释放摄像头、定位等重资源。</li><li><code>onDestroy()</code>：最终清理，销毁 Presenter、取消协程或 Rx 订阅。</li></ul><blockquote><p>提示：使用 LifecycleOwner + LifecycleObserver，将生命周期感知能力下沉至组件，避免 Activity 过载。</p></blockquote><h2 id="状态管理策略" tabindex="-1">状态管理策略 <a class="header-anchor" href="#状态管理策略" aria-label="Permalink to “状态管理策略”">​</a></h2><ul><li>ViewModel 持有界面状态，结合 SavedStateHandle 处理进程终止重建。</li><li>Jetpack Compose 可通过 <code>rememberSaveable</code> 维持轻量状态。</li><li>冷启动/热启动区分：冷启动要考虑数据预填充与骨架屏；热启动重点在快速恢复。</li></ul><h2 id="启动模式与任务栈控制" tabindex="-1">启动模式与任务栈控制 <a class="header-anchor" href="#启动模式与任务栈控制" aria-label="Permalink to “启动模式与任务栈控制”">​</a></h2><ul><li><code>standard</code>：每次显式启动创建新实例，适用于普通页面。</li><li><code>singleTop</code>：栈顶复用，适合通知点击、搜索结果等无状态场景。</li><li><code>singleTask</code>：任务栈内唯一实例，多用于首页、浏览器壳等全局入口。</li><li><code>singleInstance</code>：独占任务栈，常见于悬浮窗口、桌面快捷方式。</li><li>结合 <code>FLAG_ACTIVITY_CLEAR_TOP</code>、<code>FLAG_ACTIVITY_NEW_TASK</code> 精确管理返回逻辑。</li></ul><h2 id="交互与导航" tabindex="-1">交互与导航 <a class="header-anchor" href="#交互与导航" aria-label="Permalink to “交互与导航”">​</a></h2><ul><li>Navigation Component：以图形化导航图管理目的地与深层链接（Deep Link）。</li><li>Fragment 容器化：在大屏、可折叠屏上提升布局适配性。</li><li>Activity Result API：替代旧版 <code>onActivityResult()</code>，支持类型安全调用。</li></ul><h2 id="性能与可用性" tabindex="-1">性能与可用性 <a class="header-anchor" href="#性能与可用性" aria-label="Permalink to “性能与可用性”">​</a></h2><ul><li>避免在主线程执行 I/O，使用协程或 WorkManager 调度后台任务。</li><li>启动优化：使用 SplashScreen API、预热关键依赖、延迟初始化非关键模块。</li><li>可访问性：支持 TalkBack、手势导航、字体缩放，遵循 Material Design 指南。</li></ul><h2 id="测试策略" tabindex="-1">测试策略 <a class="header-anchor" href="#测试策略" aria-label="Permalink to “测试策略”">​</a></h2><ul><li>单元测试：结合 Robolectric 模拟生命周期。</li><li>UI 测试：使用 Espresso、Jetpack Compose TestRule 验证交互路径。</li><li>端到端：整合 Firebase Test Lab 或 Gradle Managed Devices 覆盖多机型。</li></ul><h2 id="常见问题排查" tabindex="-1">常见问题排查 <a class="header-anchor" href="#常见问题排查" aria-label="Permalink to “常见问题排查”">​</a></h2><ul><li>Activity 重建导致崩溃：检查 Bundle 数据是否实现 <code>Parcelable</code>，或是否存在静态持有 Context。</li><li>返回栈混乱：核对声明的启动模式与实际 Flag 是否冲突。</li><li>内存泄漏：配合 LeakCanary 定期扫描 View 及匿名内部类引用。</li></ul><p>围绕生命周期与任务栈进行架构设计，辅以 ViewModel、Navigation 等现代组件，可让 Activity 在复杂业务下保持整洁、可维护。</p>',20)])])}const _=a(o,[["render",r]]);export{u as __pageData,_ as default};
