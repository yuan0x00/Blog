import{_ as a,c as i,o as e,ai as n}from"./chunks/framework.aM21JT-d.js";const c=JSON.parse('{"title":"LiveData 原理与源码解读","description":"","frontmatter":{},"headers":[],"relativePath":"android/主流库源码/Jetpack/LiveData原理源码.md","filePath":"android/主流库源码/Jetpack/LiveData原理源码.md","lastUpdated":1759056152000}'),l={name:"android/主流库源码/Jetpack/LiveData原理源码.md"};function t(r,s,p,h,d,k){return e(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="livedata-原理与源码解读" tabindex="-1">LiveData 原理与源码解读 <a class="header-anchor" href="#livedata-原理与源码解读" aria-label="Permalink to &quot;LiveData 原理与源码解读&quot;">​</a></h1><h2 id="核心概述" tabindex="-1">核心概述 <a class="header-anchor" href="#核心概述" aria-label="Permalink to &quot;核心概述&quot;">​</a></h2><p>LiveData 是一种可感知生命周期的数据持有者，支持 UI 组件安全地订阅数据变化。通过生命周期感知、粘性/非粘性分发策略与主线程保证，LiveData 降低了内存泄漏与状态错位的风险。</p><h2 id="架构组成" tabindex="-1">架构组成 <a class="header-anchor" href="#架构组成" aria-label="Permalink to &quot;架构组成&quot;">​</a></h2><ul><li><strong>LiveData</strong>：抽象基类，维护数据版本、活跃观察者数量与主线程调度。</li><li><strong>MutableLiveData</strong>：允许写入数据的实现，<code>postValue</code>/<code>setValue</code> 控制线程安全更新。</li><li><strong>ObserverWrapper</strong>：封装 <code>Observer</code> 并记录其活跃状态、最后接收版本。</li><li><strong>LifecycleBoundObserver</strong>：继承自 <code>ObserverWrapper</code>，与 <code>LifecycleOwner</code> 绑定，自动在销毁时移除。</li><li><strong>MediatorLiveData</strong>：支持合并多个 LiveData 源的数据变更。</li></ul><h2 id="数据分发流程" tabindex="-1">数据分发流程 <a class="header-anchor" href="#数据分发流程" aria-label="Permalink to &quot;数据分发流程&quot;">​</a></h2><ol><li>调用 <code>observe(owner, observer)</code> 时，LiveData 创建 <code>LifecycleBoundObserver</code> 并注册至 <code>LifecycleOwner</code>。</li><li>当生命周期状态达到 <code>STARTED</code> 及以上时，<code>LifecycleBoundObserver</code> 标记为活跃，通过 <code>activeStateChanged(true)</code> 触发数据分发。</li><li><code>setValue</code> 会更新内部 <code>mVersion</code>，并通过 <code>dispatchingValue</code> 遍历活跃观察者，比较 <code>ObserverWrapper.lastVersion</code> 决定是否回调 <code>onChanged</code>。</li><li><code>postValue</code> 在子线程写入 <code>mPendingData</code>，通过主线程 Handler 切换到 <code>setValue</code>。</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// LiveData 值更新核心逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T value) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertMainThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setValue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mVersion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dispatchingValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dispatchingValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ObserverWrapper initiator) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mDispatchingValue) { mDispatchInvalidated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mDispatchingValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mDispatchInvalidated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (initiator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            forEachObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(observer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> considerNotify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(observer))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            considerNotify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initiator)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            initiator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mDispatchInvalidated)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mDispatchingValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="关键源码细节" tabindex="-1">关键源码细节 <a class="header-anchor" href="#关键源码细节" aria-label="Permalink to &quot;关键源码细节&quot;">​</a></h2><ul><li><strong>版本控制</strong>：每次 <code>setValue</code> 会递增 <code>mVersion</code>，观察者仅在 <code>observer.lastVersion &lt; mVersion</code> 的情况下收到通知，避免重复回调。</li><li><strong>线程模型</strong>：<code>assertMainThread</code> 确保读写在主线程执行，<code>postValue</code> 借助 <code>ArchTaskExecutor</code> 切换线程。</li><li><strong>粘性事件</strong>：普通 <code>observe</code> 默认接收最新一次数据，若需要非粘性可使用 <code>observeForever</code> + 手动控制版本或封装 SingleLiveEvent。</li><li><strong>主动移除</strong>：<code>removeObserver</code>/<code>removeObservers</code> 及时释放引用，避免页面退出后继续持有。</li></ul><h2 id="实践建议" tabindex="-1">实践建议 <a class="header-anchor" href="#实践建议" aria-label="Permalink to &quot;实践建议&quot;">​</a></h2><ul><li>对协程 Flow 可使用 <code>asLiveData()</code> 转换，指定 <code>Dispatchers</code> 控制线程。</li><li>对非粘性需求，封装基于 <code>MediatorLiveData</code> 的事件总线，手动消费后重置。</li><li>使用 <code>Transformations.map/switchMap</code> 或 Kotlin <code>liveData {}</code> 构建派生数据。</li><li>在测试中借助 <code>InstantTaskExecutorRule</code> 强制同步执行。</li></ul><h2 id="风险与调试" tabindex="-1">风险与调试 <a class="header-anchor" href="#风险与调试" aria-label="Permalink to &quot;风险与调试&quot;">​</a></h2><ul><li><strong>数据倒灌</strong>：活动重建时 LiveData 会再次发送最新值，应区分数据状态与一次性事件。</li><li><strong>线程问题</strong>：<code>postValue</code> 合并多次调用，最终只分发最后一次；需要逐条分发可结合队列或 Channel。</li><li>调试可覆写 <code>observe</code> 时记录 <code>Lifecycle</code> 状态，结合 <code>Debug</code> 版本开启日志。</li></ul>`,14)])])}const E=a(l,[["render",t]]);export{c as __pageData,E as default};
