import{_ as d,c as o,o as a,aj as l}from"./chunks/framework.BiF827kf.js";const p=JSON.parse('{"title":"Android 应用构建流程","description":"","frontmatter":{},"headers":[],"relativePath":"android/语言与基础/Android应用构建流程.md","filePath":"android/语言与基础/Android应用构建流程.md","lastUpdated":1759056152000}'),r={name:"android/语言与基础/Android应用构建流程.md"};function i(t,e,c,n,s,h){return a(),o("div",null,[...e[0]||(e[0]=[l('<h1 id="android-应用构建流程" tabindex="-1">Android 应用构建流程 <a class="header-anchor" href="#android-应用构建流程" aria-label="Permalink to “Android 应用构建流程”">​</a></h1><h2 id="_1-流程概览" tabindex="-1">1. 流程概览 <a class="header-anchor" href="#_1-流程概览" aria-label="Permalink to “1. 流程概览”">​</a></h2><p>Android 应用的构建可以理解为一条流水线：Gradle 解析工程配置 → 拉取并解析依赖 → 编译 Java/Kotlin 与本地代码 → 处理资源与清单 → 字节码压缩与多 dex 拆分 → 打包生成 APK/AAB → 签名与对齐 → （可选）上传分发/安装并在设备上做 dex 优化。整个过程由 Android Gradle Plugin（AGP）驱动，核心工具链包括 <code>javac/kotlinc</code>、<code>aapt2</code>、<code>d8/r8</code>、<code>bundletool</code>、<code>zipalign</code> 和 <code>apksigner</code> 等。</p><h2 id="_2-构建环境准备" tabindex="-1">2. 构建环境准备 <a class="header-anchor" href="#_2-构建环境准备" aria-label="Permalink to “2. 构建环境准备”">​</a></h2><ul><li><strong>JDK</strong>：AGP 8.x 以后默认要求 JDK 17，IDE 通常内置。注意配置 <code>JAVA_HOME</code>。</li><li><strong>Android SDK &amp; NDK</strong>：包含平台 API、构建工具（<code>build-tools</code>）、平台工具（<code>platform-tools</code>）、<code>cmake/ndk-build</code> 等。通过 Android Studio SDK Manager 或 <code>sdkmanager</code> 安装。</li><li><strong>Gradle &amp; AGP</strong>：Gradle Wrapper（<code>gradlew</code>）确保团队版本一致；<code>com.android.tools.build:gradle</code> 决定构建行为。</li><li><strong>构建缓存与代理</strong>：配置 Gradle 缓存、企业 Maven 仓库与网络代理，以加速依赖解析。</li></ul><h2 id="_3-项目结构与配置解析" tabindex="-1">3. 项目结构与配置解析 <a class="header-anchor" href="#_3-项目结构与配置解析" aria-label="Permalink to “3. 项目结构与配置解析”">​</a></h2><ol><li><strong><code>settings.gradle</code></strong>：列出参与构建的模块（<code>include</code>）、配置仓库镜像、使用版本编录（Version Catalog）。</li><li><strong><code>build.gradle[.kts]</code></strong>：分模块定义插件、Android DSL、依赖、构建变种（<code>buildTypes</code>/<code>productFlavors</code>）、Kotlin 选项等。</li><li><strong>Gradle 初始化阶段</strong>：Gradle 读取 Wrapper → 初始化构建环境 → 配置阶段执行脚本 → 构建任务图。构建缓存、configuration cache 可缩短该阶段。</li></ol><h2 id="_4-主要构建流水线" tabindex="-1">4. 主要构建流水线 <a class="header-anchor" href="#_4-主要构建流水线" aria-label="Permalink to “4. 主要构建流水线”">​</a></h2><h3 id="_4-1-依赖解析" tabindex="-1">4.1 依赖解析 <a class="header-anchor" href="#_4-1-依赖解析" aria-label="Permalink to “4.1 依赖解析”">​</a></h3><ul><li>Gradle 根据 <code>repositories {}</code> 与 <code>dependencies {}</code> 拉取远程/本地依赖，解析 POM 与变体选择（ABI、风味）。</li><li>使用 <code>dependencyResolutionManagement</code> 与版本编录统一版本。</li><li>对 Artifact 做校验（SHA-256），并缓存到 Gradle 本地仓库。</li></ul><h3 id="_4-2-源码编译" tabindex="-1">4.2 源码编译 <a class="header-anchor" href="#_4-2-源码编译" aria-label="Permalink to “4.2 源码编译”">​</a></h3><ul><li><strong>Kotlin</strong>：<code>kotlinc</code> 先编译成 JVM 字节码（<code>.class</code>），再交给 <code>javac</code> pipeline；Kotlin Gradle Plugin 负责任务编排。</li><li><strong>Java</strong>：<code>javac</code> 将源文件编译为 <code>.class</code>，生成 R 类引用资源常量。</li><li><strong>增量/并行编译</strong>：开启 Gradle <code>org.gradle.parallel=true</code>、<code>kapt.incremental.apt=true</code> 等提升效率。</li></ul><h3 id="_4-3-注解处理与字节码织入" tabindex="-1">4.3 注解处理与字节码织入 <a class="header-anchor" href="#_4-3-注解处理与字节码织入" aria-label="Permalink to “4.3 注解处理与字节码织入”">​</a></h3><ul><li><code>kapt</code>、<code>annotationProcessor</code>、<code>ksp</code> 执行代码生成。</li><li>Gradle Transform API 或 ASM/ByteBuddy 进行字节码插桩（传统 Transform 被 AGP 8.x 的 ASM Class Visitors 和 Articulation APIs 替换）。</li></ul><h3 id="_4-4-资源与清单处理" tabindex="-1">4.4 资源与清单处理 <a class="header-anchor" href="#_4-4-资源与清单处理" aria-label="Permalink to “4.4 资源与清单处理”">​</a></h3><ul><li><strong><code>aapt2 compile</code></strong> 将 <code>res/</code> 编译成中间 <code>.flat</code> 资源包。</li><li><strong>资源合并</strong>：主模块 + 依赖 AAR 资源合成，处理命名冲突和叠加。</li><li><strong><code>aapt2 link</code></strong> 生成最终 <code>resources.arsc</code>、<code>res/</code> 目录与 <code>AndroidManifest.xml</code>，并输出 R 类常量表。</li><li><strong>Data Binding/View Binding</strong>：在此阶段生成绑定类。</li><li><strong>构建变种处理</strong>：<code>manifestPlaceholders</code>、<code>buildType</code>/<code>flavor</code> 的资源覆写在此合并。</li></ul><h3 id="_4-5-本地代码构建-可选" tabindex="-1">4.5 本地代码构建（可选） <a class="header-anchor" href="#_4-5-本地代码构建-可选" aria-label="Permalink to “4.5 本地代码构建（可选）”">​</a></h3><ul><li>使用 <code>cmake</code> 或 <code>ndk-build</code> 编译 C/C++ 源文件，输出 <code>.so</code>（ABI 匹配 <code>armeabi-v7a/arm64-v8a</code> 等）。</li><li>Gradle <code>externalNativeBuild</code> 任务协调 ABI 拆分、调试符号（<code>*.so.dbg</code>）。</li></ul><h3 id="_4-6-字节码压缩与-dex-生成" tabindex="-1">4.6 字节码压缩与 dex 生成 <a class="header-anchor" href="#_4-6-字节码压缩与-dex-生成" aria-label="Permalink to “4.6 字节码压缩与 dex 生成”">​</a></h3><ul><li><strong>R8</strong>（默认启用）：执行代码缩减、Tree Shaking、混淆、优化（inlining、constant folding）。配置 <code>proguard-rules.pro</code>。</li><li><strong>D8</strong>：将优化后的 <code>.class</code> 转为 <code>.dex</code>，支持 desugaring（lambda、default method、Java 8 API backport）。</li><li><strong>多 Dex</strong>：当方法数超 65,536 时，AGP 自动拆分 dex（<code>main-dex list</code> 可控制核心类放入主 dex）。</li></ul><h3 id="_4-7-打包产物" tabindex="-1">4.7 打包产物 <a class="header-anchor" href="#_4-7-打包产物" aria-label="Permalink to “4.7 打包产物”">​</a></h3><ul><li><strong>APK</strong>：<code>apkbuilder</code> 将 <code>classes.dex</code>、<code>resources.arsc</code>、<code>res/</code>、<code>assets/</code>、<code>lib/</code>、<code>META-INF/</code> 等打包成 ZIP。</li><li><strong>Android App Bundle (AAB)</strong>：通过 Gradle <code>:app:bundleRelease</code> 调用 <code>bundletool</code> 生成 <code>.aab</code>，用于分发动态特性模块、按需拆分。</li><li><strong>Split APK</strong>：启用 ABI、屏幕密度、语言拆分，可减少下载体积。</li></ul><h3 id="_4-8-签名与对齐" tabindex="-1">4.8 签名与对齐 <a class="header-anchor" href="#_4-8-签名与对齐" aria-label="Permalink to “4.8 签名与对齐”">​</a></h3><ul><li><strong>签名</strong>： <ul><li>V1（Jar Signature）：兼容旧设备；对 ZIP 条目逐条签名。</li><li>V2/V3：对整个 APK 分块签名，更快安全；V3 支持 key rotation。</li><li>V4（可选）：为 Play Store 加速增量更新提供校验。</li><li>使用 <code>apksigner</code> 或 Gradle <code>signingConfig</code> 指定 keystore、别名、密码。</li></ul></li><li><strong>zipalign</strong>：对齐 4 字节边界，降低安装时内存占用。AGP 在 <code>assemble</code> 阶段自动执行。</li></ul><h3 id="_4-9-构建输出与发布" tabindex="-1">4.9 构建输出与发布 <a class="header-anchor" href="#_4-9-构建输出与发布" aria-label="Permalink to “4.9 构建输出与发布”">​</a></h3><ul><li><code>assembleDebug/Release</code> 输出 APK；<code>bundleRelease</code> 输出 AAB。</li><li>使用 <code>gradlew tasks --all</code> 浏览任务图；<code>gradlew :app:assembleRelease --scan</code> 获取 Build Scan 报告。</li><li>发布到 Play：上传 AAB，借助 Play Console 完成签名配置、测试轨道、分阶段发布。</li><li>企业内部分发可使用 APK + MDM 或自建更新平台。</li></ul><h2 id="_5-构建后流程-安装与运行时" tabindex="-1">5. 构建后流程（安装与运行时） <a class="header-anchor" href="#_5-构建后流程-安装与运行时" aria-label="Permalink to “5. 构建后流程（安装与运行时）”">​</a></h2><ol><li>安装器验证签名 → 解压资源 → 写入 <code>/data/app</code>。</li><li>首次运行时 <code>dex2oat</code> 依据设备 profile 生成 <code>.oat/.vdex</code>，加速后续启动。</li><li>Profile Guided Compilation：系统在后台收集热点方法，触发 <code>cmd package compile -m speed-profile</code> 优化。</li></ol><h2 id="_6-构建优化实践" tabindex="-1">6. 构建优化实践 <a class="header-anchor" href="#_6-构建优化实践" aria-label="Permalink to “6. 构建优化实践”">​</a></h2><ul><li><strong>配置缓存</strong>：启用 <code>org.gradle.configuration-cache=true</code>。</li><li><strong>并行与守护进程</strong>：<code>org.gradle.parallel=true</code>、<code>org.gradle.daemon=true</code>。</li><li><strong>本地/远程构建缓存</strong>：<code>gradle.properties</code> 中开启 <code>gradle.buildCache</code>.</li><li><strong>依赖瘦身</strong>：使用 <code>./gradlew :app:dependencies</code>，排查重复依赖；启用 R8 资源压缩（ <code>android.buildFeatures.shrinkResources=true</code>）。</li><li><strong>模块化</strong>：拆分动态特性模块（Dynamic Feature），减少主 APK 体积。</li><li><strong>持续集成</strong>：在 CI（GitHub Actions、Jenkins、GitLab CI）上配置 <code>./gradlew test lint assembleRelease</code>，结合缓存与签名管理。</li></ul><h2 id="_7-常见问题排查" tabindex="-1">7. 常见问题排查 <a class="header-anchor" href="#_7-常见问题排查" aria-label="Permalink to “7. 常见问题排查”">​</a></h2><table tabindex="0"><thead><tr><th>问题</th><th>可能原因</th><th>排查建议</th></tr></thead><tbody><tr><td>构建极慢</td><td>配置阶段耗时、依赖解析过多</td><td>使用 <code>--scan</code> 分析，启用 configuration cache，镜像仓库</td></tr><tr><td>R8 混淆后崩溃</td><td>保留规则缺失</td><td>在 <code>proguard-rules.pro</code> 添加 <code>-keep</code>，启用 stack trace retrace</td></tr><tr><td>MultiDex 崩溃</td><td>主 dex 类缺失</td><td>配置 <code>multiDexKeepFile</code> 或 <code>@Keep</code>，检查 Application 初始化类</td></tr><tr><td>NDK 编译失败</td><td>ABI 不匹配/工具链缺失</td><td>确认 <code>abiFilters</code>、NDK 版本；查看 <code>cmake</code> 日志</td></tr><tr><td>资源冲突</td><td>依赖重复资源名</td><td>使用 <code>aapt2</code> 日志、<code>tools:replace</code>，调整命名空间</td></tr></tbody></table><h2 id="_8-参考与深入阅读" tabindex="-1">8. 参考与深入阅读 <a class="header-anchor" href="#_8-参考与深入阅读" aria-label="Permalink to “8. 参考与深入阅读”">​</a></h2><ul><li>Android 官方文档：<a href="https://developer.android.com/studio/build" target="_blank" rel="noreferrer">https://developer.android.com/studio/build</a></li><li>AOSP 构建系统说明：<a href="https://source.android.com/docs/setup/build" target="_blank" rel="noreferrer">https://source.android.com/docs/setup/build</a></li><li>Android Gradle Plugin DSL：<a href="https://developer.android.com/build/gradle-tips" target="_blank" rel="noreferrer">https://developer.android.com/build/gradle-tips</a></li><li>R8 与代码压缩：<a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noreferrer">https://developer.android.com/studio/build/shrink-code</a></li><li>App Bundle 与 bundletool：<a href="https://developer.android.com/guide/app-bundle" target="_blank" rel="noreferrer">https://developer.android.com/guide/app-bundle</a></li></ul><blockquote><p>提示：若需结合企业自建 CI/CD，可在本文流程基础上补充制品仓库、签名服务（如 Google Play App Signing）、灰度发布策略等扩展环节。</p></blockquote>',35)])])}const u=d(r,[["render",i]]);export{p as __pageData,u as default};
