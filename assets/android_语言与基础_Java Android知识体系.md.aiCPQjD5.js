import{_ as o,c as i,o as a,aj as t}from"./chunks/framework.BiF827kf.js";const p=JSON.parse('{"title":"Java 开发 Android 知识体系","description":"","frontmatter":{},"headers":[],"relativePath":"android/语言与基础/Java Android知识体系.md","filePath":"android/语言与基础/Java Android知识体系.md","lastUpdated":1759056152000}'),e={name:"android/语言与基础/Java Android知识体系.md"};function n(l,r,s,g,d,c){return a(),i("div",null,[...r[0]||(r[0]=[t('<h1 id="java-开发-android-知识体系" tabindex="-1">Java 开发 Android 知识体系 <a class="header-anchor" href="#java-开发-android-知识体系" aria-label="Permalink to “Java 开发 Android 知识体系”">​</a></h1><h2 id="_1-知识体系总览" tabindex="-1">1. 知识体系总览 <a class="header-anchor" href="#_1-知识体系总览" aria-label="Permalink to “1. 知识体系总览”">​</a></h2><ul><li><strong>核心理念</strong>：以 Java 语言为基础，掌握 Android 平台的运行机制、框架组件、用户体验、性能与安全等全栈能力。</li><li><strong>学习路径</strong>：从 Java 语言进阶 → Android 平台基础 → Jetpack 生态 → 工程化与测试 → 运维、安全、性能优化 → 行业最佳实践与趋势。</li><li><strong>关键角色</strong>：移动端开发工程师、架构师、技术负责人、全栈开发者、DevOps 工程师。</li></ul><h2 id="_2-java-语言基础与进阶" tabindex="-1">2. Java 语言基础与进阶 <a class="header-anchor" href="#_2-java-语言基础与进阶" aria-label="Permalink to “2. Java 语言基础与进阶”">​</a></h2><ol><li><strong>语法与面向对象</strong>：类、接口、继承、抽象、多态、内存模型。</li><li><strong>集合框架</strong>：List、Map、Set、Queue 及线程安全集合；选择适配数据结构以匹配 UI/业务。</li><li><strong>异常与泛型</strong>：checked vs unchecked 异常、泛型通配符、约束场景。</li><li><strong>并发编程</strong>：线程模型、<code>ThreadPoolExecutor</code>、<code>FutureTask</code>、<code>CompletableFuture</code>；与 Android Handler/Looper 对比。</li><li><strong>JVM 与 ART 区别</strong>：类加载、字节码执行、GC 策略；理解对象生命周期以优化内存。</li><li><strong>函数式与新特性</strong>：Lambda、Stream、Optional；适度使用以平衡可读性与兼容性。</li></ol><h2 id="_3-android-平台基础" tabindex="-1">3. Android 平台基础 <a class="header-anchor" href="#_3-android-平台基础" aria-label="Permalink to “3. Android 平台基础”">​</a></h2><ol><li><strong>系统架构</strong>：Linux 内核 → 底层驱动 → 原生库 → Android Runtime (ART) → Framework → 应用层。</li><li><strong>四大组件</strong>：Activity、Service、BroadcastReceiver、ContentProvider；掌握声明周期、启动模式、Intent 机制。</li><li><strong>资源与配置</strong>：<code>res</code> 目录结构、<code>AndroidManifest</code> 声明、Gradle 构建变体、密度与多语言适配。</li><li><strong>线程与消息循环</strong>：Looper/MessageQueue/Handler；耗时操作放入后台线程、使用 HandlerThread/Executors。</li><li><strong>权限体系</strong>：普通、危险、自定义权限；运行时权限流程与最佳实践。</li><li><strong>存储机制</strong>：SharedPreferences、File、SQLite、Room、DataStore；依据数据敏感度与同步需求选型。</li></ol><h2 id="_4-jetpack-与-androidx-生态" tabindex="-1">4. Jetpack 与 AndroidX 生态 <a class="header-anchor" href="#_4-jetpack-与-androidx-生态" aria-label="Permalink to “4. Jetpack 与 AndroidX 生态”">​</a></h2><ul><li><strong>生命周期感知</strong>：Lifecycle、ViewModel、SavedStateHandle，保持数据跨配置变更。</li><li><strong>数据绑定与响应式</strong>：LiveData、Flow、DataBinding、ViewBinding；选择基于团队习惯。</li><li><strong>导航与架构组件</strong>：Navigation、WorkManager、Paging、Hilt；标准化异步任务与依赖注入。</li><li><strong>UI 框架演进</strong>：传统 View System → ConstraintLayout → RecyclerView → Jetpack Compose；逐步引入，兼容混合架构。</li><li><strong>App Startup</strong>：统一初始化入口，管理启动期间依赖排序与懒加载。</li><li><strong>协同组件</strong>：CameraX、ML Kit、Room、DataStore、Benchmark；围绕业务场景选用。</li></ul><h2 id="_5-ui-与交互设计原则" tabindex="-1">5. UI 与交互设计原则 <a class="header-anchor" href="#_5-ui-与交互设计原则" aria-label="Permalink to “5. UI 与交互设计原则”">​</a></h2><ol><li><strong>布局系统</strong>：LinearLayout、ConstraintLayout、MotionLayout；性能优先选择 ConstraintLayout/Compose。</li><li><strong>RecyclerView 体系</strong>：Adapter、DiffUtil、ListAdapter、ItemDecoration；关注滑动性能与复用。</li><li><strong>主题与样式</strong>：Material Design 指南、暗色模式、动态色彩；统一主题资源管理。</li><li><strong>动画与过渡</strong>：Property Animation、TransitionManager、MotionLayout、Compose Animation API；确保 60fps/90fps。</li><li><strong>无障碍与可用性</strong>：TalkBack、contentDescription、字体缩放、触达区域扩展。</li><li><strong>多端适配</strong>：手机/平板/折叠屏/可穿戴；使用 WindowSizeClass、Compose Adaptive Layout。</li></ol><h2 id="_6-网络与数据通信" tabindex="-1">6. 网络与数据通信 <a class="header-anchor" href="#_6-网络与数据通信" aria-label="Permalink to “6. 网络与数据通信”">​</a></h2><ul><li><strong>HTTP 客户端</strong>：OkHttp、Retrofit、Volley；关注连接池、缓存、拦截器、超时配置。</li><li><strong>数据协议</strong>：JSON、ProtoBuf、GraphQL、gRPC；依据性能与后端接口选择。</li><li><strong>网络优化</strong>：DNS 预解析、HTTP/2、缓存策略、离线能力、断点续传。</li><li><strong>安全传输</strong>：HTTPS、证书锁定（Pinning）、TLS 版本限制、敏感数据脱敏。</li><li><strong>同步机制</strong>：WorkManager 定时任务、JobScheduler、AlarmManager；遵循 Doze/App Standby 策略。</li><li><strong>WebView/Hybrid</strong>：Chromium 架构、JSBridge、安全沙箱、性能调优。</li></ul><h2 id="_7-本地数据与持久化" tabindex="-1">7. 本地数据与持久化 <a class="header-anchor" href="#_7-本地数据与持久化" aria-label="Permalink to “7. 本地数据与持久化”">​</a></h2><ol><li><strong>SQLite 与 Room</strong>：数据库设计、Migration 策略、索引优化、事务与批量操作。</li><li><strong>DataStore/Preferences</strong>：替换 SharedPreferences，处理数据一致性与协程支持。</li><li><strong>文件与媒体存储</strong>：外部存储、Scoped Storage、MediaStore API；处理 URI 权限与沙箱。</li><li><strong>缓存策略</strong>：内存缓存(LruCache)、磁盘缓存(DiskLruCache)、多级缓存；缓存淘汰与一致性。</li><li><strong>序列化框架</strong>：Gson、Moshi、Kotlinx Serialization（与 Java 兼容）、FastJSON；比较性能与安全。</li></ol><h2 id="_8-架构模式与分层设计" tabindex="-1">8. 架构模式与分层设计 <a class="header-anchor" href="#_8-架构模式与分层设计" aria-label="Permalink to “8. 架构模式与分层设计”">​</a></h2><ul><li><strong>经典模式</strong>：MVC、MVP、MVVM、MVI；根据团队经验与业务复杂度选择。</li><li><strong>Clean Architecture</strong>：Domain、UseCase、Repository、Data Source；提升可测试性与模块化。</li><li><strong>模块化与组件化</strong>：Gradle 多模块、ARouter、服务化、动态特性模块；权衡构建时间与开发灵活性。</li><li><strong>依赖注入</strong>：Dagger/Hilt/Koin；统一对象生命周期管理，降低耦合。</li><li><strong>数据流与状态管理</strong>：LiveData、RxJava、Coroutine Flow、StateFlow、Compose State；明确数据单向流动。</li><li><strong>跨平台与多语言</strong>：与 Kotlin、Flutter、React Native、KMM 协作策略；兼容 Java 现有代码库。</li></ul><h2 id="_9-性能优化体系" tabindex="-1">9. 性能优化体系 <a class="header-anchor" href="#_9-性能优化体系" aria-label="Permalink to “9. 性能优化体系”">​</a></h2><ol><li><strong>启动性能</strong>：<code>adb shell am start -W</code>、Baseline Profiles、SplashScreen；控制 Application/Provider 耗时。</li><li><strong>内存优化</strong>：MAT、LeakCanary、Heap Dump 分析；避免内存泄漏、使用弱引用/生命周期感知组件。</li><li><strong>卡顿与渲染</strong>：TraceView、Systrace、FrameMetrics、Choreographer；监控主线程耗时、VSync 丢帧。</li><li><strong>电量与流量</strong>：Battery Historian、Network Profiler；减少后台唤醒、批量同步。</li><li><strong>包体积</strong>：R8/ProGuard、资源压缩、Split APK/App Bundle、图片优化、Native 库裁剪。</li><li><strong>多线程调度</strong>：线程池管理、协程调度（在 Java 中借助 RxJava、Executors）、避免竞争与死锁。</li></ol><h2 id="_10-安全与隐私保护" tabindex="-1">10. 安全与隐私保护 <a class="header-anchor" href="#_10-安全与隐私保护" aria-label="Permalink to “10. 安全与隐私保护”">​</a></h2><ul><li><strong>数据安全</strong>：Keystore 加密、SQL 注入防护、敏感字段脱敏、HTTPS 强制。</li><li><strong>代码与逆向</strong>：ProGuard &amp; R8 混淆、JNI 防护、动态加载安全检查、Root/Jailbreak 检测。</li><li><strong>凭证管理</strong>：Token 存储、双因子认证、OAuth2、安全登录流程。</li><li><strong>权限审核</strong>：最小权限原则、动态权限理由说明、治理灰色权限滥用。</li><li><strong>合规要求</strong>：GDPR、CCPA、个人信息保护法；隐私协议与数据留存策略。</li></ul><h2 id="_11-测试与质量保障" tabindex="-1">11. 测试与质量保障 <a class="header-anchor" href="#_11-测试与质量保障" aria-label="Permalink to “11. 测试与质量保障”">​</a></h2><ol><li><strong>单元测试</strong>：JUnit、Mockito、Robolectric；编写业务逻辑与 ViewModel 测试。</li><li><strong>UI 自动化</strong>：Espresso、UIAutomator、Compose Test；稳定的测试数据与同步机制。</li><li><strong>集成测试</strong>：Instrumentation Tests、Firebase Test Lab；覆盖多机型与系统版本。</li><li><strong>性能测试</strong>：Macrobenchmark、Profiler、基准测试模块；设定性能回归阈值。</li><li><strong>灰度与监控</strong>：A/B 测试、Feature Flag、线上日志聚合（如 Firebase Crashlytics、Sentry）。</li><li><strong>质量指标</strong>：崩溃率、ANR、冷启动耗时、帧率、留存率；纳入 OKR/KPI。</li></ol><h2 id="_12-工程化与-devops" tabindex="-1">12. 工程化与 DevOps <a class="header-anchor" href="#_12-工程化与-devops" aria-label="Permalink to “12. 工程化与 DevOps”">​</a></h2><ul><li><strong>版本控制策略</strong>：Git Flow、Trunk Based、代码评审流程；引入静态扫描（SpotBugs、Lint）。</li><li><strong>构建系统</strong>：Gradle 配置优化、构建缓存、CI/CD（Jenkins、GitHub Actions、GitLab CI）。</li><li><strong>持续集成</strong>：自动化测试、代码质量门禁、构建版本号生成。</li><li><strong>持续交付</strong>：内测渠道（Firebase App Distribution、蒲公英）、版本审批、渠道包管理。</li><li><strong>配置管理</strong>：多环境（Dev/Staging/Prod）、密钥管理、动态配置中心。</li><li><strong>可观测性</strong>：日志规范、埋点策略、APM、实时告警。</li></ul><h2 id="_13-常见业务场景与方案对比" tabindex="-1">13. 常见业务场景与方案对比 <a class="header-anchor" href="#_13-常见业务场景与方案对比" aria-label="Permalink to “13. 常见业务场景与方案对比”">​</a></h2><ol><li><strong>即时通讯</strong>：自建 Socket、MQTT、第三方 IM SDK；权衡实时性与开发成本。</li><li><strong>音视频</strong>：ExoPlayer、MediaPlayer、WebRTC；关注编解码能力、延迟、版权保护。</li><li><strong>地图与定位</strong>：Google Maps、高德、百度；考虑出海/国内策略、隐私合规。</li><li><strong>支付与认证</strong>：IAP、支付宝/微信 SDK、OAuth；处理回调一致性、幂等性。</li><li><strong>推送体系</strong>：FCM、厂商通道、自建推送；多通道聚合与消息到达率监控。</li><li><strong>离线同步</strong>：Room + WorkManager、数据差量同步、冲突解决策略。</li></ol><h2 id="_14-学习资源与实践路径" tabindex="-1">14. 学习资源与实践路径 <a class="header-anchor" href="#_14-学习资源与实践路径" aria-label="Permalink to “14. 学习资源与实践路径”">​</a></h2><ul><li><strong>官方文档</strong>：developer.android.com、Android Jetpack 指南、Platform Release Notes。</li><li><strong>经典书籍</strong>：《深入理解 Android》、《Android 开发艺术探索》、《Android 高级进阶》。</li><li><strong>课程与社区</strong>：Google Codelabs、Jetpack Compose Camp、知乎/掘金、高质量 GitHub 项目。</li><li><strong>实战建议</strong>：选择中等复杂度开源项目（如 Plaid、Sunflower）剖析架构，替换部分模块以验证掌握程度。</li><li><strong>技能认证</strong>：Associate Android Developer、Google Developers Expert (GDE)。</li></ul><h2 id="_15-职业发展与能力矩阵" tabindex="-1">15. 职业发展与能力矩阵 <a class="header-anchor" href="#_15-职业发展与能力矩阵" aria-label="Permalink to “15. 职业发展与能力矩阵”">​</a></h2><ol><li><strong>初级</strong>：掌握 Java/Android 基础组件、常见 UI、网络与本地存储；能完成简单需求。</li><li><strong>中级</strong>：理解架构模式、掌握 Jetpack 组件、性能调优、测试体系；能独立负责模块。</li><li><strong>高级</strong>：系统设计、跨端协同、CI/CD、团队代码规范、业务指标驱动。</li><li><strong>架构师/技术负责人</strong>：全局规划、技术选型、平台建设、成本控制、培训与管理。</li></ol><h2 id="_16-趋势观察与前瞻建议" tabindex="-1">16. 趋势观察与前瞻建议 <a class="header-anchor" href="#_16-趋势观察与前瞻建议" aria-label="Permalink to “16. 趋势观察与前瞻建议”">​</a></h2><ul><li><strong>语言演进</strong>：Kotlin 成为主流，但 Java 代码仍广泛存在；需掌握 Kotlin 互操作、渐进迁移策略。</li><li><strong>UI 未来</strong>：Jetpack Compose、Material You、自适应布局成为必备能力。</li><li><strong>运行时优化</strong>：Baseline Profiles、ART JIT/AOT、Partial Reactivation；持续关注 Android 性能架构更新。</li><li><strong>跨平台融合</strong>：Flutter、React Native、KMM 与 Java 互通；根据团队资源与业务目标选择。</li><li><strong>AI 与自动化</strong>：智能化测试、代码生成、Crash 预测；在数据合规前提下引入。</li></ul><h2 id="_17-学习方法与实践建议" tabindex="-1">17. 学习方法与实践建议 <a class="header-anchor" href="#_17-学习方法与实践建议" aria-label="Permalink to “17. 学习方法与实践建议”">​</a></h2><ol><li><strong>循环迭代</strong>：每完成一个项目/模块，总结复盘，更新知识图谱。</li><li><strong>系统笔记</strong>：构建自己的知识仓库，分类记录框架原理、踩坑案例、调优参数。</li><li><strong>代码阅读</strong>：研读 AOSP 关键模块（Activity、View、AMS），理解设计动机。</li><li><strong>分享输出</strong>：通过技术博客、团队分享、读书会巩固认知并影响团队文化。</li><li><strong>项目实验室</strong>：搭建小型 Demo 验证新技术（Compose/WorkManager/Hilt），避免在生产中盲目尝试。</li></ol><hr><p>以上知识体系覆盖 Android Java 开发的关键领域，学习时可根据自身角色与项目阶段择重深入，并结合实践项目持续验证与拓展能力。</p>',37)])])}const u=o(e,[["render",n]]);export{p as __pageData,u as default};
