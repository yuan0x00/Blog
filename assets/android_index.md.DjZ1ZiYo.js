import{_ as e,C as l,c as r,o,ai as n,j as i,a,G as h}from"./chunks/framework.BjpnAPRY.js";const y=JSON.parse('{"title":"Android 面试高频考点与参考答案","description":"","frontmatter":{},"headers":[],"relativePath":"android/index.md","filePath":"android/index.md","lastUpdated":1760200632000}'),p={name:"android/index.md"};function d(k,s,c,g,E,u){const t=l("Mermaid");return o(),r("div",null,[s[4]||(s[4]=n(`<h1 id="android-面试高频考点与参考答案" tabindex="-1">Android 面试高频考点与参考答案 <a class="header-anchor" href="#android-面试高频考点与参考答案" aria-label="Permalink to &quot;Android 面试高频考点与参考答案&quot;">​</a></h1><h2 id="一、四大组件与生命周期-必考" tabindex="-1">一、四大组件与生命周期（必考） <a class="header-anchor" href="#一、四大组件与生命周期-必考" aria-label="Permalink to &quot;一、四大组件与生命周期（必考）&quot;">​</a></h2><h3 id="_1-activity-生命周期及使用场景" tabindex="-1">1. <strong>Activity 生命周期及使用场景</strong> <a class="header-anchor" href="#_1-activity-生命周期及使用场景" aria-label="Permalink to &quot;1. **Activity 生命周期及使用场景**&quot;">​</a></h3><h4 id="✅-参考答案" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>核心生命周期方法</strong>：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() → </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() → </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onResume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() → [running] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">→ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onPause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() → </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onStop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() → </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>关键回调说明</strong>： <ul><li><code>onCreate()</code>：初始化布局、ViewModel、订阅数据。</li><li><code>onStart()</code>：UI 可见但不可交互（恢复动画、传感器）。</li><li><code>onResume()</code>：完全可见且可交互（开始相机预览、位置更新）。</li><li><code>onPause()</code>：<strong>保存关键数据</strong>（不能做耗时操作！），停止动画。</li><li><code>onStop()</code>：UI 不可见（释放资源如广播、传感器）。</li><li><code>onDestroy()</code>：最终清理（但可能被系统直接 kill，不保证调用）。</li></ul></li></ul><h4 id="实际应用" tabindex="-1"><strong>实际应用</strong>： <a class="header-anchor" href="#实际应用" aria-label="Permalink to &quot;**实际应用**：&quot;">​</a></h4><ul><li><strong>保存状态</strong>：<code>onSaveInstanceState()</code>（临时状态，如旋转屏幕）</li><li><strong>避免内存泄漏</strong>：在 <code>onPause()</code>/<code>onStop()</code> 中注销监听器、停止线程。</li></ul><blockquote><p>💡 <strong>面试加分</strong>：提到 <strong>Jetpack Lifecycle</strong> 组件可自动管理生命周期感知型组件。</p></blockquote><hr><h3 id="_2-fragment-与-activity-生命周期关系" tabindex="-1">2. <strong>Fragment 与 Activity 生命周期关系</strong> <a class="header-anchor" href="#_2-fragment-与-activity-生命周期关系" aria-label="Permalink to &quot;2. **Fragment 与 Activity 生命周期关系**&quot;">​</a></h3><h4 id="✅-参考答案-1" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-1" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li>Fragment 生命周期 <strong>嵌套在 Activity 生命周期内</strong>。</li><li><strong>关键顺序</strong>： <ul><li>Activity <code>onCreate()</code> → Fragment <code>onAttach()</code> → <code>onCreate()</code> → <code>onCreateView()</code></li><li>Activity <code>onResume()</code> → Fragment <code>onResume()</code></li><li><strong>返回栈操作</strong>：<code>addToBackStack()</code> 时，Fragment 会走 <code>onPause()</code> → <code>onStop()</code>，但不会 <code>onDestroyView()</code></li></ul></li></ul><h4 id="常见问题" tabindex="-1"><strong>常见问题</strong>： <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;**常见问题**：&quot;">​</a></h4><ul><li><strong>Fragment 重叠</strong>：旋转屏幕时未正确处理 <code>savedInstanceState</code>。</li><li><strong>通信方式</strong>： <ul><li><strong>推荐</strong>：通过 <strong>ViewModel 共享数据</strong>（解耦）</li><li>次选：<code>activity?.supportFragmentManager?.findFragmentByTag()</code></li></ul></li></ul><blockquote><p>⚠️ <strong>注意</strong>：避免在 Fragment 中直接持有 Activity 引用（内存泄漏风险）。</p></blockquote><hr><h3 id="_3-service-与-intentservice-区别" tabindex="-1">3. <strong>Service 与 IntentService 区别</strong> <a class="header-anchor" href="#_3-service-与-intentservice-区别" aria-label="Permalink to &quot;3. **Service 与 IntentService 区别**&quot;">​</a></h3><h4 id="✅-参考答案-2" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-2" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>Service</th><th>IntentService</th></tr></thead><tbody><tr><td><strong>运行线程</strong></td><td>主线程（需手动开子线程）</td><td><strong>工作线程</strong>（HandlerThread）</td></tr><tr><td><strong>任务队列</strong></td><td>❌ 不支持</td><td>✅ 串行处理多个 Intent</td></tr><tr><td><strong>自动停止</strong></td><td>❌ 需手动 <code>stopSelf()</code></td><td>✅ 处理完自动停止</td></tr><tr><td><strong>适用场景</strong></td><td>长期运行（如音乐播放）</td><td>短时后台任务（如上传日志）</td></tr></tbody></table><blockquote><p>🚫 <strong>现状</strong>：<code>IntentService</code> 已废弃（Android 8.0 后后台限制），<strong>推荐使用 WorkManager</strong>。</p></blockquote><hr><h3 id="_4-broadcastreceiver-类型与限制" tabindex="-1">4. <strong>BroadcastReceiver 类型与限制</strong> <a class="header-anchor" href="#_4-broadcastreceiver-类型与限制" aria-label="Permalink to &quot;4. **BroadcastReceiver 类型与限制**&quot;">​</a></h3><h4 id="✅-参考答案-3" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-3" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>静态注册</strong>（Manifest）： <ul><li>全局广播（如开机启动）</li><li><strong>Android 8.0+ 限制</strong>：大部分隐式广播无法静态注册</li></ul></li><li><strong>动态注册</strong>（代码）： <ul><li>需在 <code>onResume()</code> 注册，<code>onPause()</code> 注销（避免内存泄漏）</li><li>可接收显式广播和部分系统广播</li></ul></li></ul><h4 id="替代方案" tabindex="-1"><strong>替代方案</strong>： <a class="header-anchor" href="#替代方案" aria-label="Permalink to &quot;**替代方案**：&quot;">​</a></h4><ul><li><strong>前台服务</strong>：需显示通知（Android 9+）</li><li><strong>WorkManager</strong>：延迟/周期性任务</li><li><strong>JobScheduler</strong>：系统级任务调度</li></ul><blockquote><p>💡 <strong>关键点</strong>：Android 8.0+ 后台执行限制（Background Execution Limits）是重点！</p></blockquote><hr><h2 id="二、ui-体系与自定义-view-高频" tabindex="-1">二、UI 体系与自定义 View（高频） <a class="header-anchor" href="#二、ui-体系与自定义-view-高频" aria-label="Permalink to &quot;二、UI 体系与自定义 View（高频）&quot;">​</a></h2><h3 id="_5-view-绘制流程-measure-→-layout-→-draw" tabindex="-1">5. <strong>View 绘制流程（Measure → Layout → Draw）</strong> <a class="header-anchor" href="#_5-view-绘制流程-measure-→-layout-→-draw" aria-label="Permalink to &quot;5. **View 绘制流程（Measure → Layout → Draw）**&quot;">​</a></h3><h4 id="✅-参考答案-4" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-4" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ol><li><strong>Measure</strong>： <ul><li>父 View 调用 <code>measure()</code> → 子 View <code>onMeasure()</code></li><li>使用 <code>MeasureSpec</code>（模式 + 大小）确定尺寸</li><li>模式：<code>EXACTLY</code>（精确值）、<code>AT_MOST</code>（最大值）、<code>UNSPECIFIED</code>（无限制）</li></ul></li><li><strong>Layout</strong>： <ul><li>父 View 调用 <code>layout()</code> → 子 View <code>onLayout()</code>（ViewGroup 需实现）</li><li>确定子 View 位置（left, top, right, bottom）</li></ul></li><li><strong>Draw</strong>： <ul><li><code>onDraw()</code> 绘制内容（Canvas 操作）</li><li><strong>注意</strong>：View 默认不调用 <code>onDraw()</code>，需 <code>setWillNotDraw(false)</code></li></ul></li></ol><h4 id="性能优化" tabindex="-1"><strong>性能优化</strong>： <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;**性能优化**：&quot;">​</a></h4><ul><li>避免在 <code>onDraw()</code> 中创建对象（触发 GC）</li><li>使用 <code>View.setLayerType()</code> 开启硬件加速（慎用，可能更慢）</li></ul><hr><h3 id="_6-事件分发机制-dispatchtouchevent-→-onintercepttouchevent-→-ontouchevent" tabindex="-1">6. <strong>事件分发机制（dispatchTouchEvent → onInterceptTouchEvent → onTouchEvent）</strong> <a class="header-anchor" href="#_6-事件分发机制-dispatchtouchevent-→-onintercepttouchevent-→-ontouchevent" aria-label="Permalink to &quot;6. **事件分发机制（dispatchTouchEvent → onInterceptTouchEvent → onTouchEvent）**&quot;">​</a></h3><h4 id="✅-参考答案-5" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-5" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>流程</strong>： <ol><li>Activity <code>dispatchTouchEvent()</code></li><li>ViewGroup <code>dispatchTouchEvent()</code> → <strong><code>onInterceptTouchEvent()</code></strong>（是否拦截）</li><li>若不拦截 → 子 View <code>dispatchTouchEvent()</code> → <code>onTouchEvent()</code></li><li>若子 View 不消费 → 回传到 ViewGroup <code>onTouchEvent()</code></li></ol></li><li><strong>关键方法</strong>： <ul><li><code>onInterceptTouchEvent()</code>：<strong>ViewGroup 特有</strong>，返回 true 表示拦截</li><li><code>onTouchEvent()</code>：返回 true 表示消费事件</li></ul></li></ul><h4 id="经典问题" tabindex="-1"><strong>经典问题</strong>： <a class="header-anchor" href="#经典问题" aria-label="Permalink to &quot;**经典问题**：&quot;">​</a></h4><ul><li><strong>滑动冲突</strong>：外部 ScrollView 与内部 RecyclerView 冲突 <ul><li><strong>解决方案</strong>：重写 <code>onInterceptTouchEvent()</code>，根据滑动方向决定是否拦截</li></ul></li></ul><blockquote><p>💡 <strong>口诀</strong>：<strong>“问-拦-处”</strong>（dispatch → intercept → touch）</p></blockquote><hr><h3 id="_7-recyclerview-优化策略" tabindex="-1">7. <strong>RecyclerView 优化策略</strong> <a class="header-anchor" href="#_7-recyclerview-优化策略" aria-label="Permalink to &quot;7. **RecyclerView 优化策略**&quot;">​</a></h3><h4 id="✅-参考答案-6" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-6" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>基础优化</strong>： <ul><li>使用 <code>RecyclerView.ViewHolder</code></li><li><code>setHasFixedSize(true)</code>（Item 高度固定时）</li><li>避免在 <code>onBindViewHolder()</code> 中做耗时操作</li></ul></li><li><strong>高级优化</strong>： <ul><li><strong>DiffUtil</strong>：计算最小变更（配合 <code>ListAdapter</code>）</li><li><strong>预加载</strong>：<code>setItemViewCacheSize()</code>、<code>setRecycledViewPool()</code></li><li><strong>嵌套优化</strong>：禁止 RecyclerView 嵌套 ScrollView（用 <code>NestedScrollView</code> + <code>setNestedScrollingEnabled(false)</code>）</li></ul></li><li><strong>性能监控</strong>： <ul><li>GPU 渲染分析（开发者选项 → Profile GPU Rendering）</li><li>StrictMode 检测主线程 IO</li></ul></li></ul><blockquote><p>📌 <strong>面试亮点</strong>：提到 <strong>“局部刷新”</strong>（<code>notifyItemChanged(position, payload)</code>）可减少重绘。</p></blockquote><hr><h2 id="三、性能优化-实战重点" tabindex="-1">三、性能优化（实战重点） <a class="header-anchor" href="#三、性能优化-实战重点" aria-label="Permalink to &quot;三、性能优化（实战重点）&quot;">​</a></h2><h3 id="_8-anr-application-not-responding-原因与排查" tabindex="-1">8. <strong>ANR（Application Not Responding）原因与排查</strong> <a class="header-anchor" href="#_8-anr-application-not-responding-原因与排查" aria-label="Permalink to &quot;8. **ANR（Application Not Responding）原因与排查**&quot;">​</a></h3><h4 id="✅-参考答案-7" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-7" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>触发条件</strong>： <ul><li><strong>主线程阻塞 &gt; 5秒</strong>（Activity）</li><li><strong>BroadcastReceiver &gt; 10秒</strong></li><li><strong>Service &gt; 20秒</strong></li></ul></li><li><strong>常见原因</strong>： <ul><li>主线程 I/O（读写文件、数据库）</li><li>主线程复杂计算（未用协程/线程池）</li><li>死锁（主线程等待子线程，子线程等待主线程）</li></ul></li><li><strong>排查工具</strong>： <ul><li><strong>ANR 日志</strong>：<code>/data/anr/traces.txt</code></li><li><strong>Systrace</strong>：分析主线程卡顿</li><li><strong>StrictMode</strong>：检测主线程违规操作</li></ul></li></ul><h4 id="解决方案" tabindex="-1"><strong>解决方案</strong>： <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;**解决方案**：&quot;">​</a></h4><ul><li>耗时操作移至后台线程（协程、ExecutorService）</li><li>数据库操作用 Room + 协程</li><li>避免在 <code>onCreate()</code>/<code>onResume()</code> 中做初始化</li></ul><hr><h3 id="_9-内存泄漏常见场景与检测" tabindex="-1">9. <strong>内存泄漏常见场景与检测</strong> <a class="header-anchor" href="#_9-内存泄漏常见场景与检测" aria-label="Permalink to &quot;9. **内存泄漏常见场景与检测**&quot;">​</a></h3><h4 id="✅-参考答案-8" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-8" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><p><strong>常见泄漏点</strong>：</p><table tabindex="0"><thead><tr><th>场景</th><th>原因</th><th>解决方案</th></tr></thead><tbody><tr><td><strong>静态 Context</strong></td><td><code>static Activity context</code></td><td>改用 <code>ApplicationContext</code></td></tr><tr><td><strong>Handler 匿名内部类</strong></td><td>持有 Activity 引用</td><td>改为静态内部类 + WeakReference</td></tr><tr><td><strong>未注销监听器</strong></td><td>BroadcastReceiver/传感器</td><td>在 <code>onPause()</code>/<code>onStop()</code> 注销</td></tr><tr><td><strong>RxJava/协程未取消</strong></td><td>订阅未 dispose</td><td>用 <code>CompositeDisposable</code> 或 <code>viewModelScope</code></td></tr><tr><td><strong>View 引用未释放</strong></td><td>PopupWindow 持有 Activity</td><td>设置 <code>setFocusable(true)</code> 或手动 detach</td></tr></tbody></table></li><li><p><strong>检测工具</strong>：</p><ul><li><strong>Android Profiler</strong>：实时监控内存</li><li><strong>LeakCanary</strong>：自动检测泄漏并生成报告</li></ul></li></ul><blockquote><p>💡 <strong>原则</strong>：<strong>生命周期结束时，必须释放所有强引用</strong>。</p></blockquote><hr><h3 id="_10-启动优化-冷启动-2s" tabindex="-1">10. <strong>启动优化（冷启动 &lt; 2s）</strong> <a class="header-anchor" href="#_10-启动优化-冷启动-2s" aria-label="Permalink to &quot;10. **启动优化（冷启动 &lt; 2s）**&quot;">​</a></h3><h4 id="✅-参考答案-9" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-9" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>启动阶段</strong>： <ol><li><strong>Zygote fork 进程</strong></li><li><strong>Application onCreate()</strong></li><li><strong>Activity onCreate() → onResume()</strong></li></ol></li><li><strong>优化策略</strong>： <ul><li><strong>Application 优化</strong>： <ul><li>延迟初始化非必要 SDK（如友盟、Bugly）</li><li>使用 <strong>ContentProvider 自动初始化</strong>（谨慎！）</li></ul></li><li><strong>Splash 页优化</strong>： <ul><li>设置主题背景（避免白屏）：<div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SplashTheme&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;android:windowBackground&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;@drawable/splash_bg&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>首屏数据预加载（协程）</li></ul></li><li><strong>工具分析</strong>： <ul><li><code>adb shell am start -W [package]/[activity]</code> 查看启动时间</li><li>Systrace 分析主线程耗时</li></ul></li></ul></li></ul><blockquote><p>📌 <strong>目标</strong>：冷启动 <strong>&lt; 2 秒</strong>（Google Play 要求）</p></blockquote><hr><h2 id="四、架构与工程化-中高级重点" tabindex="-1">四、架构与工程化（中高级重点） <a class="header-anchor" href="#四、架构与工程化-中高级重点" aria-label="Permalink to &quot;四、架构与工程化（中高级重点）&quot;">​</a></h2><h3 id="_11-mvvm-架构与-jetpack-组件" tabindex="-1">11. <strong>MVVM 架构与 Jetpack 组件</strong> <a class="header-anchor" href="#_11-mvvm-架构与-jetpack-组件" aria-label="Permalink to &quot;11. **MVVM 架构与 Jetpack 组件**&quot;">​</a></h3><h4 id="✅-参考答案-10" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-10" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4>`,67)),i("ul",null,[s[2]||(s[2]=n("<li><strong>核心组件</strong>： <ul><li><strong>ViewModel</strong>：存储 UI 相关数据，<strong>生命周期感知</strong>（Activity 重建不丢失）</li><li><strong>LiveData</strong>：可观察数据持有者，<strong>自动解注册</strong>（避免内存泄漏）</li><li><strong>Room</strong>：SQLite 抽象层，支持协程/Flow</li><li><strong>Navigation</strong>：单 Activity 多 Fragment 导航</li></ul></li>",1)),i("li",null,[s[0]||(s[0]=i("strong",null,"数据流",-1)),s[1]||(s[1]=a("：",-1)),h(t,{id:"mermaid-862",graph:"graph%20LR%0A%20%20Repository%20--%3E%20ViewModel%0A%20%20ViewModel%20--%3E%20LiveData%0A%20%20LiveData%20--%3E%20Activity%2FFragment%0A"})]),s[3]||(s[3]=i("li",null,[i("strong",null,"优势"),a("： "),i("ul",null,[i("li",null,[i("strong",null,"解耦"),a("：UI 与业务逻辑分离")]),i("li",null,[i("strong",null,"生命周期安全"),a("：自动管理订阅")]),i("li",null,[i("strong",null,"测试友好"),a("：ViewModel 可单元测试")])])],-1))]),s[5]||(s[5]=n(`<blockquote><p>💡 <strong>进阶</strong>：用 <strong>StateFlow</strong> 替代 LiveData（Kotlin 协程生态更佳）</p></blockquote><hr><h3 id="_12-协程在-android-中的最佳实践" tabindex="-1">12. <strong>协程在 Android 中的最佳实践</strong> <a class="header-anchor" href="#_12-协程在-android-中的最佳实践" aria-label="Permalink to &quot;12. **协程在 Android 中的最佳实践**&quot;">​</a></h3><h4 id="✅-参考答案-11" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-11" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>作用域选择</strong>： <ul><li><code>viewModelScope</code>：ViewModel 中（Activity 销毁时自动取消）</li><li><code>lifecycleScope</code>：Activity/Fragment 中（生命周期结束时取消）</li></ul></li><li><strong>线程切换</strong>： <ul><li><strong>IO 操作</strong>：<code>withContext(Dispatchers.IO)</code></li><li><strong>计算密集</strong>：<code>withContext(Dispatchers.Default)</code></li><li><strong>UI 更新</strong>：自动在主线程（协程构建器默认）</li></ul></li><li><strong>异常处理</strong>： <ul><li><code>try-catch</code> 包裹 suspend 函数</li><li>全局异常处理器：<code>CoroutineExceptionHandler</code></li></ul></li></ul><h4 id="示例" tabindex="-1"><strong>示例</strong>： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;**示例**：&quot;">​</a></h4><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ViewModel 中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewModelScope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 IO 线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            _uiState.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动切回主线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            _uiState.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>🚫 <strong>避免</strong>：在协程中直接调用耗时函数（未切换线程）</p></blockquote><hr><h2 id="五、系统原理与底层-高级考点" tabindex="-1">五、系统原理与底层（高级考点） <a class="header-anchor" href="#五、系统原理与底层-高级考点" aria-label="Permalink to &quot;五、系统原理与底层（高级考点）&quot;">​</a></h2><h3 id="_13-handler-消息机制原理" tabindex="-1">13. <strong>Handler 消息机制原理</strong> <a class="header-anchor" href="#_13-handler-消息机制原理" aria-label="Permalink to &quot;13. **Handler 消息机制原理**&quot;">​</a></h3><h4 id="✅-参考答案-12" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-12" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>核心组件</strong>： <ul><li><strong>MessageQueue</strong>：消息队列（单链表实现，按时间排序）</li><li><strong>Looper</strong>：循环从 MQ 取消息（<code>loop()</code> 死循环）</li><li><strong>Handler</strong>：发送消息（<code>sendMessage()</code>）和处理消息（<code>handleMessage()</code>）</li></ul></li><li><strong>线程绑定</strong>： <ul><li><strong>主线程 Looper</strong>：ActivityThread 创建</li><li><strong>子线程 Looper</strong>：需手动 <code>Looper.prepare()</code> + <code>Looper.loop()</code></li></ul></li><li><strong>内存泄漏原因</strong>： <ul><li>Handler 匿名内部类持有 Activity 引用</li><li>Message 持有 Handler 引用 → 间接持有 Activity</li></ul></li></ul><h4 id="解决方案-1" tabindex="-1"><strong>解决方案</strong>： <a class="header-anchor" href="#解决方案-1" aria-label="Permalink to &quot;**解决方案**：&quot;">​</a></h4><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activity: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Activity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Looper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMainLooper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weakRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activity)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        weakRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 安全使用 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>💡 <strong>深度理解</strong>：Message 复用池（<code>obtain()</code> / <code>recycle()</code>）减少 GC</p></blockquote><hr><h3 id="_14-binder-跨进程通信-ipc-原理" tabindex="-1">14. <strong>Binder 跨进程通信（IPC）原理</strong> <a class="header-anchor" href="#_14-binder-跨进程通信-ipc-原理" aria-label="Permalink to &quot;14. **Binder 跨进程通信（IPC）原理**&quot;">​</a></h3><h4 id="✅-参考答案-13" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-13" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>为什么用 Binder</strong>？ <ul><li>性能：<strong>1 次拷贝</strong>（共享内存需 2 次，Socket 更多）</li><li>安全：基于 UID/PID 验证</li><li>易用：封装为 AIDL 接口</li></ul></li><li><strong>通信流程</strong>： <ol><li>Client 调用 AIDL 接口 → Proxy</li><li>Binder 驱动 → Server Manager</li><li>Server 的 Stub 处理请求 → 返回结果</li></ol></li><li><strong>Android 中的应用</strong>： <ul><li>ActivityManagerService（AMS）</li><li>WindowManagerService（WMS）</li><li>自定义 Service（<code>onBind()</code> 返回 IBinder）</li></ul></li></ul><blockquote><p>📌 <strong>面试亮点</strong>：提到 <strong>Binder 线程池</strong>（每个进程默认 15 个 Binder 线程）</p></blockquote><hr><h2 id="六、新特性与-jetpack-趋势考点" tabindex="-1">六、新特性与 Jetpack（趋势考点） <a class="header-anchor" href="#六、新特性与-jetpack-趋势考点" aria-label="Permalink to &quot;六、新特性与 Jetpack（趋势考点）&quot;">​</a></h2><h3 id="_15-compose-与传统-view-系统对比" tabindex="-1">15. <strong>Compose 与传统 View 系统对比</strong> <a class="header-anchor" href="#_15-compose-与传统-view-系统对比" aria-label="Permalink to &quot;15. **Compose 与传统 View 系统对比**&quot;">​</a></h3><h4 id="✅-参考答案-14" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-14" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>View 系统</th><th>Jetpack Compose</th></tr></thead><tbody><tr><td><strong>声明式</strong></td><td>❌ 命令式（findViewById + set）</td><td>✅ 声明式（函数描述 UI）</td></tr><tr><td><strong>状态驱动</strong></td><td>手动更新（setText）</td><td>自动重组（State 驱动）</td></tr><tr><td><strong>性能</strong></td><td>需手动优化（ViewHolder）</td><td>智能跳过（Recomposition）</td></tr><tr><td><strong>学习曲线</strong></td><td>低</td><td>中（需理解状态、副作用）</td></tr><tr><td><strong>互操作</strong></td><td>-</td><td>支持 <code>AndroidView</code> 嵌入传统 View</td></tr></tbody></table><h4 id="compose-核心概念" tabindex="-1"><strong>Compose 核心概念</strong>： <a class="header-anchor" href="#compose-核心概念" aria-label="Permalink to &quot;**Compose 核心概念**：&quot;">​</a></h4><ul><li><strong>@Composable</strong>：可组合函数</li><li><strong>State</strong>：<code>mutableStateOf()</code> 驱动重组</li><li><strong>Side Effect</strong>：<code>LaunchedEffect</code>、<code>DisposableEffect</code></li></ul><blockquote><p>💡 <strong>趋势</strong>：Google 全力推进 Compose，<strong>新项目首选 Compose</strong></p></blockquote><hr><h3 id="_16-hilt-依赖注入原理" tabindex="-1">16. <strong>Hilt 依赖注入原理</strong> <a class="header-anchor" href="#_16-hilt-依赖注入原理" aria-label="Permalink to &quot;16. **Hilt 依赖注入原理**&quot;">​</a></h3><h4 id="✅-参考答案-15" tabindex="-1">✅ 参考答案： <a class="header-anchor" href="#✅-参考答案-15" aria-label="Permalink to &quot;✅ 参考答案：&quot;">​</a></h4><ul><li><strong>作用</strong>：简化 Dagger 2 使用，<strong>自动生成依赖图</strong></li><li><strong>核心注解</strong>： <ul><li><code>@HiltAndroidApp</code>：Application 入口</li><li><code>@AndroidEntryPoint</code>：Activity/Fragment 注入点</li><li><code>@Inject</code>：构造函数/字段注入</li></ul></li><li><strong>优势</strong>： <ul><li><strong>减少模板代码</strong>（无需 Component/Module 手写）</li><li><strong>作用域绑定</strong>：<code>@Singleton</code>、<code>@ActivityScoped</code></li></ul></li><li><strong>原理</strong>：编译期生成 Dagger 代码（APT）</li></ul><h4 id="示例-1" tabindex="-1"><strong>示例</strong>： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;**示例**：&quot;">​</a></h4><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@HiltAndroidApp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@AndroidEntryPoint</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppCompatActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Inject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserRepository</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>📌 <strong>替代方案</strong>：Koin（轻量级，运行时反射）</p></blockquote><hr><h2 id="七、高频手写题" tabindex="-1">七、高频手写题 <a class="header-anchor" href="#七、高频手写题" aria-label="Permalink to &quot;七、高频手写题&quot;">​</a></h2><h3 id="_1-双重检查锁实现单例" tabindex="-1">1. <strong>双重检查锁实现单例</strong> <a class="header-anchor" href="#_1-双重检查锁实现单例" aria-label="Permalink to &quot;1. **双重检查锁实现单例**&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> volatile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Singleton.class) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>⚠️ <strong>关键</strong>：<code>volatile</code> 禁止指令重排序（避免未初始化对象被访问）</p></blockquote><hr><h3 id="_2-自定义-view-实现圆形头像" tabindex="-1">2. <strong>自定义 View 实现圆形头像</strong> <a class="header-anchor" href="#_2-自定义-view-实现圆形头像" aria-label="Permalink to &quot;2. **自定义 View 实现圆形头像**&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CircleImageView</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @JvmOverloads</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    attrs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AttributeSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    defStyleAttr: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppCompatImageView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defStyleAttr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> paint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Paint.ANTI_ALIAS_FLAG).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isFilterBitmap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onDraw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(canvas: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (width.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">coerceAtMost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(height) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawCircle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, radius, paint)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 绘制图片（裁剪为圆形）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        drawable?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            drawable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, width, height)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BitmapShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                getBitmapFromDrawable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(drawable),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Shader.TileMode.CLAMP,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Shader.TileMode.CLAMP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            paint.shader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawCircle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, radius, paint)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><hr><h2 id="八、面试建议" tabindex="-1">八、面试建议 <a class="header-anchor" href="#八、面试建议" aria-label="Permalink to &quot;八、面试建议&quot;">​</a></h2><table tabindex="0"><thead><tr><th>职级</th><th>重点方向</th></tr></thead><tbody><tr><td><strong>初级</strong></td><td>四大组件、基础 UI、简单优化</td></tr><tr><td><strong>中级</strong></td><td>性能优化、架构设计、协程/Flow</td></tr><tr><td><strong>高级</strong></td><td>系统原理（Binder/Handler）、Compose、跨端方案</td></tr></tbody></table><h3 id="✅-准备策略" tabindex="-1">✅ 准备策略： <a class="header-anchor" href="#✅-准备策略" aria-label="Permalink to &quot;✅ 准备策略：&quot;">​</a></h3><ol><li><strong>动手实践</strong>：确保能手写 RecyclerView 优化、协程封装。</li><li><strong>原理深挖</strong>：理解 Handler、Binder、View 绘制底层机制。</li><li><strong>项目复盘</strong>：准备 1-2 个性能优化案例（如“ANR 从 5% 降到 0.1%”）。</li><li><strong>关注新趋势</strong>：Compose、Kotlin Multiplatform（KMP）、Hilt。</li></ol>`,49))])}const m=e(p,[["render",d]]);export{y as __pageData,m as default};
