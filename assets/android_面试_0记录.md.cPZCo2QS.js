import{_ as i,c as a,o as e,ai as o}from"./chunks/framework.4IxF6_6k.js";const b=JSON.parse('{"title":"面试问题","description":"","frontmatter":{},"headers":[],"relativePath":"android/面试/0记录.md","filePath":"android/面试/0记录.md","lastUpdated":1760450060000}'),r={name:"android/面试/0记录.md"};function t(d,l,n,h,c,u){return e(),a("div",null,[...l[0]||(l[0]=[o('<h1 id="面试问题" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题" aria-label="Permalink to &quot;面试问题&quot;">​</a></h1><h2 id="综合能力" tabindex="-1">综合能力 <a class="header-anchor" href="#综合能力" aria-label="Permalink to &quot;综合能力&quot;">​</a></h2><ul><li>做过的项目有什么亮点，怎么实现的，怎么量化收益的？</li><li>做过最难的技术问题是什么，怎么定位的、解决的，积累了什么经验？</li><li>做过哪些性能优化，带来了哪些指标提升？</li></ul><h2 id="android-核心能力" tabindex="-1">Android 核心能力 <a class="header-anchor" href="#android-核心能力" aria-label="Permalink to &quot;Android 核心能力&quot;">​</a></h2><h3 id="组件与生命周期" tabindex="-1">组件与生命周期 <a class="header-anchor" href="#组件与生命周期" aria-label="Permalink to &quot;组件与生命周期&quot;">​</a></h3><ul><li>如何完整梳理 Activity 生命周期，并实现全局监听？</li><li>各种 Activity 启动模式的差异与适用场景是什么？</li><li>Fragment 与 Activity 如何安全交互并保持生命周期联动？如何避免 <code>getActivity()</code> 空指针？</li><li>Android 的状态保存机制如何运作？若需自定义保存方案该怎么做？</li><li>一个 Activity 是否可以关联多个 Window？底层机制如何支撑？</li></ul><h3 id="ui-与交互" tabindex="-1">UI 与交互 <a class="header-anchor" href="#ui-与交互" aria-label="Permalink to &quot;UI 与交互&quot;">​</a></h3><ul><li>View 事件分发完整链路是什么？关键回调负责哪些决策？</li><li>面对滑动冲突时，你的诊断与解决思路是什么？</li><li><code>onMeasure()</code> 传入的两个 <code>MeasureSpec</code> 分别表示什么含义？</li><li>自定义 View 布局阶段 <code>onLayout()</code> 的摆放逻辑如何设计？</li><li>ConstraintLayout 的主要限制或性能隐患有哪些？</li><li>不借助 RecyclerView，仅用 ViewGroup 如何实现高性能纵向列表？</li><li>常用 ViewGroup API（如 <code>requestLayout</code>、<code>invalidate</code> 等）分别在什么场景使用？</li></ul><h3 id="消息循环与线程" tabindex="-1">消息循环与线程 <a class="header-anchor" href="#消息循环与线程" aria-label="Permalink to &quot;消息循环与线程&quot;">​</a></h3><ul><li>单线程环境中的 Handler、Looper、MessageQueue 分别扮演什么角色？数量上是否有限制？</li><li>Handler 的消息调度原理是什么？它是如何绑定到特定线程的？<code>postDelay</code> 如何实现延迟？</li><li>如何利用 Handler 的空闲时机执行后台任务？IdleHandler 的触发条件是什么？</li><li>Android 消息有没有优先级？如何打印 Looper 正在执行的回调信息？</li></ul><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><ul><li>App 启动优化通常会遇到哪些瓶颈？你如何突破？</li><li>在复杂业务中，怎样定位启动慢的具体模块？</li><li>RecyclerView 可以从哪些维度优化？它有哪些内建特性可以利用？</li><li>你做过哪些内存优化？处理图片内存时如何评估占用？</li><li>如何判断触发 OOM 及其类型？对应的预防手段是什么？</li><li>针对界面流畅性，你实践过哪些优化策略？常用的流畅度指标是什么？</li></ul><h3 id="网络与图像" tabindex="-1">网络与图像 <a class="header-anchor" href="#网络与图像" aria-label="Permalink to &quot;网络与图像&quot;">​</a></h3><ul><li>如何阐述 OkHttp 与 Retrofit 的协作原理？拦截器在其中起到什么作用？</li><li>OkHttp 源码中的核心机制是什么？拦截器执行顺序如何组织？</li><li>Retrofit 相比直接使用 OkHttp 有何优势？它如何切换线程并封装拦截器？</li><li>如何为 OkHttp 全局追加公共 Header？</li><li>Glide 的缓存分层策略是怎样的？弱引用队列为何重要？</li><li>下载过程中如果宿主 Activity 被销毁，Glide 如何处理？加载超大图时的裁剪策略是什么？</li></ul><h3 id="存储与进程通信" tabindex="-1">存储与进程通信 <a class="header-anchor" href="#存储与进程通信" aria-label="Permalink to &quot;存储与进程通信&quot;">​</a></h3><ul><li>MMKV 相比 SharedPreferences 有哪些优势和适用场景？</li><li>在序列化/反序列化时，需要关注哪些格式与兼容性问题？</li><li>如果文件扩展名被篡改，如何判断其真实类型？</li><li>列举至少两种 Android IPC 方式，并说明各自优缺点。</li></ul><h3 id="稳定性与质量保障" tabindex="-1">稳定性与质量保障 <a class="header-anchor" href="#稳定性与质量保障" aria-label="Permalink to &quot;稳定性与质量保障&quot;">​</a></h3><ul><li>常见 ANR 触发场景有哪些？如何快速定位根因？</li><li>WebView 引起的内存泄漏如何诊断与修复？</li><li>崩溃捕获机制如何构建？Bugly 为什么能实现全局捕获？</li><li>ANR 可以通过哪些手段检测或提前预警？</li><li>使用 Bugly 排查崩溃时，你的分析流程是什么？</li><li>如果需要查看用户日志，应如何采集与回传？</li><li>为保证上线质量，从开发、测试到运营需要搭建怎样的流程闭环？</li></ul><h3 id="系统原理" tabindex="-1">系统原理 <a class="header-anchor" href="#系统原理" aria-label="Permalink to &quot;系统原理&quot;">​</a></h3><ul><li>详细说明 Android 应用冷启动的整体流程。</li><li>Android 是如何加载与执行应用代码的？</li><li>Activity、Window、View 之间的关系如何建立并驱动渲染？</li></ul><h3 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h3><ul><li>你的项目架构是什么形态（组件化、插件化、MVVM 等）？核心拆分原则是什么？</li><li>怎么划分应用的分层结构并保持模块间解耦？</li><li>ViewModel 是否应该持有 View 或 Model 的引用？为什么？</li><li>Lifecycle 与 ViewModel 的内部原理是什么？</li><li>对主流架构模式（MVC/MVP/MVVM/Clean 等）有何理解与选型依据？</li></ul><h2 id="java-基础能力" tabindex="-1">Java 基础能力 <a class="header-anchor" href="#java-基础能力" aria-label="Permalink to &quot;Java 基础能力&quot;">​</a></h2><h3 id="集合与数据结构" tabindex="-1">集合与数据结构 <a class="header-anchor" href="#集合与数据结构" aria-label="Permalink to &quot;集合与数据结构&quot;">​</a></h3><ul><li>HashMap、数组、List 的差异与选型依据是什么？</li><li>HashMap 与 LinkedHashMap 在性能和适用场景上有何不同？</li><li>ArrayList 的扩容策略如何实现？</li><li>SparseArray、ArrayMap 有哪些特点？适合哪些场景？</li></ul><h3 id="并发与线程" tabindex="-1">并发与线程 <a class="header-anchor" href="#并发与线程" aria-label="Permalink to &quot;并发与线程&quot;">​</a></h3><ul><li>多线程开发中需要格外注意哪些问题？</li><li><code>synchronized</code> 与 <code>volatile</code> 的区别是什么？</li><li><code>sleep()</code> 与 <code>wait()</code> 的语义差异与使用边界在哪里？</li><li>常见的线程安全手段有哪些？如何选择？</li><li>双重检查锁的单例为何必须配合 <code>volatile</code>？</li><li>使用线程池时要关注哪些配置项？默认实现存在哪些坑？</li><li>如何预防与排查死锁？</li></ul><h3 id="jvm-与内存" tabindex="-1">JVM 与内存 <a class="header-anchor" href="#jvm-与内存" aria-label="Permalink to &quot;JVM 与内存&quot;">​</a></h3><ul><li>GC 触发流程是怎样的？</li><li>强、软、弱、虚引用分别适用于哪些场景？</li><li>遇到 OOM 或内存泄漏时，你通常如何定位问题？</li><li>什么是内存抖动？如何避免？</li></ul><h3 id="对象与异常" tabindex="-1">对象与异常 <a class="header-anchor" href="#对象与异常" aria-label="Permalink to &quot;对象与异常&quot;">​</a></h3><ul><li>深拷贝与浅拷贝有何区别？</li><li>如何借助 <code>clone()</code> 实现深拷贝？关键步骤有哪些？</li></ul><h3 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h3><ul><li>项目中常用哪些设计模式？分别解决了哪些问题？</li><li>使用工厂模式的动机是什么？为何不能简单 <code>new</code>？</li><li>单例模式有哪些缺点？实际踩过什么坑？</li><li>建造者模式适合处理哪些类型的对象构建问题？</li></ul><h3 id="泛型与位运算" tabindex="-1">泛型与位运算 <a class="header-anchor" href="#泛型与位运算" aria-label="Permalink to &quot;泛型与位运算&quot;">​</a></h3><ul><li>如何理解 Java 泛型及其带来的类型安全？</li><li>泛型擦除机制是如何工作的？</li><li>方法重载是否支持泛型？需要注意哪些限制？</li><li>常用的位运算符有哪些？各自典型场景是什么？</li></ul><h2 id="kotlin-能力" tabindex="-1">Kotlin 能力 <a class="header-anchor" href="#kotlin-能力" aria-label="Permalink to &quot;Kotlin 能力&quot;">​</a></h2><h3 id="语言特性" tabindex="-1">语言特性 <a class="header-anchor" href="#语言特性" aria-label="Permalink to &quot;语言特性&quot;">​</a></h3><ul><li><code>let</code>、<code>run</code>、<code>also</code>、<code>apply</code>、<code>with</code> 有何区别？如何快速选择？</li><li>主构造函数与次构造函数的职责如何划分？</li><li>伴生对象的用途与约束是什么？</li><li>扩展函数的优势和局限性分别是什么？</li><li>Kotlin 可变集合与不可变集合的差异及选型依据是什么？</li></ul><h3 id="委托机制" tabindex="-1">委托机制 <a class="header-anchor" href="#委托机制" aria-label="Permalink to &quot;委托机制&quot;">​</a></h3><ul><li><code>by</code> 关键字如何支持类委托与属性委托？典型使用场景？</li></ul><h3 id="协程体系" tabindex="-1">协程体系 <a class="header-anchor" href="#协程体系" aria-label="Permalink to &quot;协程体系&quot;">​</a></h3><ul><li>Kotlin 协程为何被视为轻量线程？底层调度原理是什么？</li><li>使用协程带来哪些开发效率或体验提升？</li><li>当父协程取消时，子协程的生命周期如何变化？</li><li>协程取消时，正在进行的 IO 操作会中断吗？如何配置？</li><li>Flow 与协程的关系是什么？为何需要 Flow？</li><li>协程异常如何捕获并传播？父子协程如何传递异常？</li><li>Kotlin 切线程与 Java 切线程在语法和实现上有哪些差异？</li><li>协程中的“锁”机制有哪些实现方式？适用场景？</li></ul>',42)])])}const q=i(r,[["render",t]]);export{b as __pageData,q as default};
